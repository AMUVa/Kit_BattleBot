#include <Arduino.h>

// Kit_BattleBot.ino: BattleBot control with RemoteXY for AMUVa (https://github.com/amuva)
// El proyecto de RemoteXY está disponible en https://remotexy.com/en/editor/b5e110518a57fbec4cab4b3ce0b6206d/

// IMPORTANTE: Descargar las librerías RemoteXY y ESP32Servo en Arduino IDE. También el paquete "boards" esp32.
//             Conectar la ESP32C3, seleccionar el puerto correspondiente y la placa ESP32C3 Dev Module.
//             Descargar la app RemoteXY y elegir Bluetooth BLE (con Bluetooth encendido).

// IMPORTANTE: Editar a continación el nombre y cotraseña del robot en Bluetooth BLE:
#define REMOTEXY_BLUETOOTH_NAME "Mi BattleBot"
#define REMOTEXY_ACCESS_PASSWORD "1234"

// IMPORTANTE: Elegir el tipo de arma que tiene tu robot a continuación:
#define ARMA 2 // Cambia el número por 0 = BLDC, 1 = Servo

/*
    ESQUEMÁTICO DE LAS SEÑALES DE CONTROL
        +---------------------------+
        |   ESP32-C3 SuperMini      |
        |                           |
        |  Pin        Señal         |
        |  IO0 +----> S1 (ESC)      |
        |  IO1 +----> S2 (ESC)      |
        |  IO3 +----> CONTROL ARMA  |
        |    (servo o brushless)    |
        |                           |
        +---------------------------+
*/

#if (ARMA != 0) && (ARMA != 1)
#error "Elije el tipo de ARMA al principio del código: BLDC o Servo (0 o 1)"
#endif

/* 
NO TOCAR, ESTA PARTE ES GENERADA AUTOMÁTICAMENTE POR REMOTEXY 

This source code of graphical user interface
has been generated automatically by RemoteXY editor.
To compile this code using RemoteXY library 3.1.13 or later version
download by link http://remotexy.com/en/library/
To connect using RemoteXY mobile app by link http://remotexy.com/en/download/
- for ANDROID 4.15.01 or later version;
- for iOS 1.12.1 or later version;

This source code is free software; you can redistribute it and/or
modify it under the terms of the GNU Lesser General Public
License as published by the Free Software Foundation; either
version 2.1 of the License, or (at your option) any later version.
*/

//////////////////////////////////////////////
//        RemoteXY include library          //
//////////////////////////////////////////////

// you can enable debug logging to Serial at 115200
// #define REMOTEXY__DEBUGLOG

// RemoteXY select connection mode and include library
#define REMOTEXY_MODE__ESP32CORE_BLE

#include <BLEDevice.h>

#include <RemoteXY.h>

// RemoteXY GUI configuration  
#pragma pack(push, 1) 
uint8_t RemoteXY_CONF[] =   // 128 bytes
  { 255,4,0,0,0,121,0,19,0,0,0,65,77,85,86,97,32,66,97,116,
  116,108,101,66,111,116,0,27,3,200,92,200,84,200,80,1,1,4,0,5,
  12,16,69,69,15,15,63,63,17,14,60,60,32,2,26,31,1,97,37,28,
  28,98,34,26,26,99,32,24,24,0,2,82,84,69,83,84,0,129,55,2,
  91,10,60,2,82,9,60,2,82,9,64,78,65,77,85,86,97,32,75,105,
  116,32,66,97,116,116,108,101,98,111,116,0,4,145,16,22,69,146,15,21,
  63,146,14,20,60,16*(1-ARMA),2,26 };

// this structure defines all the variables and events of your control interface
struct {

  // input variables
  int8_t joystick_01_x;  // from -100 to 100
  int8_t joystick_01_y;  // from -100 to 100
  uint8_t button_01;     // =1 if button pressed, else =0
  int8_t slider_01;      // from 0 to 100

  // other variable
  uint8_t connect_flag;  // =1 if wire connected, else =0

} RemoteXY;
#pragma pack(pop)

/////////////////////////////////////////////
//           END RemoteXY include          //
/////////////////////////////////////////////

#include <ESP32Servo.h>

class Kit_BattleBot {
private:
  int s1Pin, s2Pin, weaponPin;
  Servo angle, throttle, weapon;

public:
  Kit_BattleBot(int S1Pin, int S2Pin, int WeaponPin)
    : s1Pin(S1Pin), s2Pin(S2Pin), weaponPin(WeaponPin) {}

  void begin() {
    #if ARMA == 0
    pinMode(weaponPin, OUTPUT);
    digitalWrite(weaponPin, 0);
    delay(1000);
    #endif
    angle.attach(s2Pin, 1000, 2000);
    throttle.attach(s1Pin, 1000, 2000);
    weapon.attach(weaponPin, 1000, 2000);
    stop();
  }

  void move(int forwardSpeed, int turnSpeed) {
    int throttleValue = map(forwardSpeed, -100, 100, 0, 180)+5;
    int angleValue = map(turnSpeed, -100, 100, 0, 180)+1;

    throttle.write(throttleValue);
    angle.write(angleValue);
  }

  void stop() {
    throttle.write(95);       // Stop the motors by setting to neutral position
    angle.write(91);          // Stop the motors by setting to neutral position
    #if ARMA == 0
    weapon.write(90 * ARMA);  // Stop the weapon by setting to neutral position
    #endif
  }

  void setWeapon(int angle) {
    int mappedAngle = map(angle, 0, 100, 0, 180);
    weapon.write(mappedAngle);
  }
};

#define LED 8
Kit_BattleBot myrobot(0, 1, 3);  // S1, S2, Weapon

void setup() {
  RemoteXY_Init();

  pinMode(LED, OUTPUT);

  myrobot.begin();
  myrobot.stop();

  RemoteXY.joystick_01_x = 0;
  RemoteXY.joystick_01_y = 0;
  RemoteXY.slider_01 = 0;
}

void loop() {
  RemoteXY_Handler();

  digitalWrite(LED, !RemoteXY.button_01);

  if (RemoteXY.connect_flag == 1) {
    myrobot.move(RemoteXY.joystick_01_y, RemoteXY.joystick_01_x);
    myrobot.setWeapon(RemoteXY.slider_01);
  } else {
      myrobot.stop();
  }
}
